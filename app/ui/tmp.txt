This file has everything that was inside useEffect before


    function addSegment(centerX: number, centerY: number, radius: number, taskId: string, taskText: string){
        // TODO: need to rethink this a bit so its more react-like
        // TODO: scaling with wheel
        // frowned upon to use useref but heres how if u do https://dev.to/nitsancohen770/using-refs-and-hooks-to-call-child-function-in-parent-component-4mm3#:~:text=In%20React%2C%20it's%20generally%20best,cases%2C%20you%20can%20use%20refs.
        // https://www.dhiwise.com/post/exploring-useref-a-must-know-hook-for-every-react-developer

        /*
        functional components seem to need to use useEffect??? read these and see
        https://stackoverflow.com/questions/32414308/updating-state-on-props-change-in-react-form - is it an antipattern or not??? - doesnt seem to be
        https://www.pluralsight.com/resources/blog/guides/prop-changes-in-react-component -- trying this tutorial ***************
        https://dev.to/savagepixie/how-to-mimic-componentdidupdate-with-react-hooks-3j8c

        */



        // couple of special cases
        if (segments.length === 0) {
            // just put the task in
            const firstSeg: Segment = {
                taskId: taskId,
                text: taskText,
                from: 0,
                to: 2 * Math.PI * radius, // the entire circle's circumference
                colour: "red"
            };
            setSegments([firstSeg]);
            // draw the text and fill the colour
            //TODO: need to set max width and font scale
            console.log("drawing font");
            ctx.font = "30px sans-serif";
            //ctx.textBaseline = "alphabetic";
            ctx.fillStyle = "black";
            ctx.fillText("test!", centerX, centerY);
            return;
        }
        /*if(segments.length === 1){
            // the first division
            ctx.beginPath();
            ctx.moveTo(centerX - radius, centerY);
            ctx.lineTo(centerX + radius, centerY);
            ctx.stroke();
            return;
        }*/
        // otherwise, just split the segment with the largest circumference value
    }